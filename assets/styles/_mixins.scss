// Shorthands to help writing easier to understand code.

@mixin font-face(
  $family,
  $file,
  $weight: 'normal',
  $style: 'normal',
  $woff2: true,
  $base-path: '../assets/fonts/'
) {
  @font-face {
    font-display: swap;
    font-family: $family;
    font-style: unquote($style);
    font-weight: unquote($weight);
    @if $woff2 {
      src: url($base-path+$file+'.woff2') format('woff2'),
        url($base-path+$file+'.woff') format('woff');
    } @else {
      src: url($base-path+$file+'.woff') format('woff');
    }
  }
}

@mixin center(
  $max-width: var(--container-max-width),
  $padding: var(--container-padding)
) {
  display: block;
  margin-inline: auto;
  max-width: $max-width;
  padding-left: $padding;
  padding-right: $padding;
}

@mixin reset-content-margins($direction: 'both') {
  @if ($direction == 'both' or $direction == 'top') {
    > :first-child {
      margin-top: 0;
      padding-top: 0;
    }
  }

  @if ($direction == 'both' or $direction == 'bottom') {
    > :last-child {
      margin-bottom: 0;
      padding-bottom: 0;
    }
  }
}

@mixin reset-list {
  display: block;
  list-style: none;
  margin: 0;
  padding: 0;
}

@mixin reset-list-item {
  margin-bottom: 0;
}

@mixin reset-link {
  text-decoration: none;
}

/**
* Grid Mixin
*
* Applies a flexbox grid (based on css variables) to a container element. All direct children will be modified to create a column based grid.
*/
@mixin grid($columns: 1, $alignment: flex-start, $row-gap: var(--gap-width), $column-gap: var(--gap-width) ) {
  --grid-columns: #{$columns};
  --grid-alignment: #{$alignment};
  --grid-row-gap: #{$row-gap};
  --grid-column-gap: #{$column-gap};

  column-gap: var(--grid-column-gap);
  display: flex;
  flex-wrap: wrap;
  justify-content: var(--grid-alignment);
  row-gap: var(--grid-row-gap);
  width: 100%;

  > * {
    width: calc((100% / var(--grid-columns)) - ((var(--grid-columns) - 1) / var(--grid-columns) * var(--grid-column-gap)));
  }
}
